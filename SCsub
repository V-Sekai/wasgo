# SCsub
Import("env")

module_env = env.Clone()

common_includes = [
    "./thirdparty/wasm-micro-runtime/core/iwasm/interpreter",
    "./thirdparty/wasm-micro-runtime/core/iwasm/aot",
    "./thirdparty/wasm-micro-runtime/core/iwasm/include",
    "./thirdparty/wasm-micro-runtime/core/shared/mem-alloc",
    "./thirdparty/wasm-micro-runtime/core/iwasm/common",
    "./thirdparty/wasm-micro-runtime/core/shared/utils",
]

common_sdk = [
    "./thirdparty/wasm-micro-runtime/core/shared/mem-alloc/ems/ems_alloc.c",
    "./thirdparty/wasm-micro-runtime/core/shared/mem-alloc/ems/ems_hmu.c",
    "./thirdparty/wasm-micro-runtime/core/shared/mem-alloc/ems/ems_kfc.c",
    "./thirdparty/wasm-micro-runtime/core/shared/mem-alloc/mem_alloc.c",
    "./thirdparty/wasm-micro-runtime/core/shared/utils/bh_assert.c",
    "./thirdparty/wasm-micro-runtime/core/shared/utils/bh_common.c",
    "./thirdparty/wasm-micro-runtime/core/shared/utils/bh_hashmap.c",
    "./thirdparty/wasm-micro-runtime/core/shared/utils/bh_list.c",
    "./thirdparty/wasm-micro-runtime/core/shared/utils/bh_log.c",
    "./thirdparty/wasm-micro-runtime/core/shared/utils/bh_queue.c",
    "./thirdparty/wasm-micro-runtime/core/shared/utils/bh_vector.c",
    "./thirdparty/wasm-micro-runtime/core/shared/utils/runtime_timer.c",
    "./thirdparty/wasm-micro-runtime/core/shared/platform/common/memory/mremap.c",
    "./thirdparty/wasm-micro-runtime/core/iwasm/libraries/libc-builtin/libc_builtin_wrapper.c",
    "./thirdparty/wasm-micro-runtime/core/iwasm/common/wasm_c_api.c",
    "./thirdparty/wasm-micro-runtime/core/iwasm/common/wasm_exec_env.c",
    "./thirdparty/wasm-micro-runtime/core/iwasm/common/wasm_memory.c",
    "./thirdparty/wasm-micro-runtime/core/iwasm/common/wasm_native.c",
    "./thirdparty/wasm-micro-runtime/core/iwasm/common/wasm_runtime_common.c",
    "./thirdparty/wasm-micro-runtime/core/iwasm/common/wasm_shared_memory.c",
    "./thirdparty/wasm-micro-runtime/core/iwasm/interpreter/wasm_interp_classic.c",
    "./thirdparty/wasm-micro-runtime/core/iwasm/interpreter/wasm_loader.c",
    "./thirdparty/wasm-micro-runtime/core/iwasm/interpreter/wasm_runtime.c",
    "./thirdparty/wasm-micro-runtime/core/iwasm/aot/aot_intrinsic.c",
    "./thirdparty/wasm-micro-runtime/core/iwasm/common/wasm_loader_common.c",
    "./thirdparty/wasm-micro-runtime/core/iwasm/common/arch/invokeNative_general.c",
]

platform_settings = {
    "windows": {
        "sdk": [
            "./thirdparty/wasm-micro-runtime/core/shared/platform/windows/platform_init.c",
            "./thirdparty/wasm-micro-runtime/core/shared/platform/windows/win_malloc.c",
            "./thirdparty/wasm-micro-runtime/core/shared/platform/windows/win_memmap.c",
            "./thirdparty/wasm-micro-runtime/core/shared/platform/windows/win_thread.c",
            "./thirdparty/wasm-micro-runtime/core/shared/platform/windows/win_time.c",
            "./thirdparty/wasm-micro-runtime/core/shared/platform/windows/win_socket.c",
            "./thirdparty/wasm-micro-runtime/core/shared/platform/windows/win_util.c",
        ],
        "includes": [
            "./thirdparty/wasm-micro-runtime/core/shared/platform/windows",
            "./thirdparty/wasm-micro-runtime/core/shared/platform/include",
            "./thirdparty/wasm-micro-runtime/core/iwasm/include",
        ],
        "defines": ["BH_PLATFORM_WINDOWS", "WIN32", "_WINDOWS"],
    },
    "macos": {
        "sdk": [
            "./thirdparty/wasm-micro-runtime/core/shared/platform/darwin/platform_init.c",
            "./thirdparty/wasm-micro-runtime/core/shared/platform/common/posix/posix_malloc.c",
            "./thirdparty/wasm-micro-runtime/core/shared/platform/common/posix/posix_memmap.c",
            "./thirdparty/wasm-micro-runtime/core/shared/platform/common/posix/posix_thread.c",
            "./thirdparty/wasm-micro-runtime/core/shared/platform/common/posix/posix_time.c",
            "./thirdparty/wasm-micro-runtime/core/shared/platform/common/posix/posix_blocking_op.c",
        ],
        "includes": [
            "./thirdparty/wasm-micro-runtime/core/shared/platform/darwin",
            "./thirdparty/wasm-micro-runtime/core/shared/platform/include",
        ],
        "defines": ["BH_PLATFORM_DARWIN"],
    },
    "linuxbsd": {
        "sdk": [
            "./thirdparty/wasm-micro-runtime/core/shared/platform/linux/platform_init.c",
            "./thirdparty/wasm-micro-runtime/core/shared/platform/common/posix/posix_malloc.c",
            "./thirdparty/wasm-micro-runtime/core/shared/platform/common/posix/posix_memmap.c",
            "./thirdparty/wasm-micro-runtime/core/shared/platform/common/posix/posix_thread.c",
            "./thirdparty/wasm-micro-runtime/core/shared/platform/common/posix/posix_time.c",
            "./thirdparty/wasm-micro-runtime/core/shared/platform/common/posix/posix_blocking_op.c",
        ],
        "includes": [
            "./thirdparty/wasm-micro-runtime/core/shared/platform/linux",
            "./thirdparty/wasm-micro-runtime/core/shared/platform/include",
        ],
        "defines": ["BH_PLATFORM_LINUX"],
    },
}

env.Prepend(CPPPATH=common_includes)

platform = module_env["platform"]
if platform in platform_settings:
    settings = platform_settings[platform]
    common_sdk += settings["sdk"]
    env.Prepend(CPPPATH=settings["includes"])
    module_env.Append(CPPDEFINES=settings["defines"])

if platform == "windows":
    if module_env["use_mingw"]:
        common_sdk.append("./thirdparty/wasm-micro-runtime/core/iwasm/common/arch/invokeNative_em64_GAS.s")
    else:
        common_sdk.append("./thirdparty/wasm-micro-runtime/core/iwasm/common/arch/invokeNative_em64.asm")
elif platform == "linuxbsd":
    module_env.Append(CPPDEFINES=[("TIME_UTC", 1)])
    common_sdk.append("./thirdparty/wasm-micro-runtime/core/iwasm/common/arch/invokeNative_em64.s")
elif platform == "macos" and module_env["arch"] == "arm64":
    module_env.Append(CPPDEFINES=[("TIME_UTC", 1)])
    common_sdk.append("./thirdparty/wasm-micro-runtime/core/iwasm/common/arch/invokeNative_osx_universal.s")
else:
    module_env.Append(CPPDEFINES=[("TIME_UTC", 1)])
    common_sdk.append("./thirdparty/wasm-micro-runtime/core/iwasm/common/arch/invokeNative_general.c")

if platform == "javascript":
    module_env.Append(CPPDEFINES=["BUILD_TARGET_X86_32"])
else:
    env.Prepend(CPPPATH=["thirdparty/zydis/include", "thirdparty/zydis/src", "thirdparty/zycore-c/include"])
    module_env.Append(
        CPPDEFINES=[
            "BUILD_TARGET_X86_64",
            "ZYCORE_STATIC_BUILD",
            "ZYDIS_STATIC_BUILD",
            ("WASM_ENABLE_AOT", 1),
        ]
    )
    common_sdk += [
        "./thirdparty/wasm-micro-runtime/core/iwasm/aot/aot_loader.c",
        "./thirdparty/wasm-micro-runtime/core/iwasm/aot/aot_runtime.c",
        "./thirdparty/wasm-micro-runtime/core/iwasm/aot/arch/aot_reloc_x86_64.c",

    "./thirdparty/zycore-c/src/Allocator.c",
    "./thirdparty/zycore-c/src/ArgParse.c",
    "./thirdparty/zycore-c/src/Bitset.c",
    "./thirdparty/zycore-c/src/Format.c",
    "./thirdparty/zycore-c/src/List.c",
    "./thirdparty/zycore-c/src/String.c",
    "./thirdparty/zycore-c/src/Vector.c",
    "./thirdparty/zycore-c/src/Zycore.c",
    "./thirdparty/zycore-c/src/API/Memory.c",
    "./thirdparty/zycore-c/src/API/Process.c",
    "./thirdparty/zycore-c/src/API/Synchronization.c",
    "./thirdparty/zycore-c/src/API/Terminal.c",
    "./thirdparty/zycore-c/src/API/Thread.c",
    "./thirdparty/zydis/src/Decoder.c",
    "./thirdparty/zydis/src/DecoderData.c",
    "./thirdparty/zydis/src/Encoder.c",
    "./thirdparty/zydis/src/EncoderData.c",
    "./thirdparty/zydis/src/Formatter.c",
    "./thirdparty/zydis/src/FormatterATT.c",
    "./thirdparty/zydis/src/FormatterBase.c",
    "./thirdparty/zydis/src/FormatterBuffer.c",
    "./thirdparty/zydis/src/FormatterIntel.c",
    "./thirdparty/zydis/src/MetaInfo.c",
    "./thirdparty/zydis/src/Mnemonic.c",
    "./thirdparty/zydis/src/Register.c",
    "./thirdparty/zydis/src/SharedData.c",
    "./thirdparty/zydis/src/String.c",
    "./thirdparty/zydis/src/Utils.c",
    "./thirdparty/zydis/src/Zydis.c",
    ]

if platform == "windows":
    if module_env.msvc:
        module_env["AS"] = "ml64"
    else:
        import subprocess

        try:
            subprocess.check_call(
                [str(module_env["AS"]), "--version"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL
            )
        except:
            old_as = str(module_env["AS"])
            module_env["AS"] = "x86_64-w64-mingw32-as"
            print(old_as + " not found. switching to " + str(module_env["AS"]))
    module_env["ASFLAGS"] = "-c"

module_env.Prepend(
    CPPDEFINES=[
        "WASM_ENABLE_FAST_JIT",
        ("WASM_API_EXTERN", ""),
        ("WASM_RUNTIME_API_EXTERN", ""),
        ("OS_ENABLE_HW_BOUND_CHECK", 1),
        ("OS_ENABLE_WAKEUP_BLOCKING_OP", 1),
        ("BH_FREE", "wasm_runtime_free"),
        ("BH_MALLOC", "wasm_runtime_malloc"),
        "HAVE_STRUCT_TIMESPEC",
        ("WASM_ENABLE_BULK_MEMORY", 0),
        ("WASM_ENABLE_FAST_INTERP", 0),
        ("WASM_ENABLE_INTERP", 1),
        ("WASM_ENABLE_MODULE_INST_CONTEXT", 1),
        ("WASM_ENABLE_LIBC_BUILTIN", 1),
        ("WASM_ENABLE_MINI_LOADER", 0),
        ("WASM_ENABLE_MULTI_MODULE", 0),
        ("WASM_ENABLE_SHARED_MEMORY", 0),
        ("WASGO_API_GENERATION", "wasgo_api.json"),
    ]
)

module_env.disable_warnings()
module_env.add_source_files(env.modules_sources, common_sdk)
module_env.add_source_files(env.modules_sources, "src/*.cpp")
module_env.add_source_files(env.modules_sources, "api/*.cpp")
module_env.add_source_files(env.modules_sources, "api/shared/*.cpp")

env.add_source_files(env.modules_sources, "*.cpp")
