# SCsub
Import('env')

module_env = env.Clone()

# add include files 
module_env.Prepend( CPPPATH = [
  "./thirdparty/wasm-micro-runtime/core/iwasm/interpreter",
  "./thirdparty/wasm-micro-runtime/core/iwasm/aot",
  "./thirdparty/wasm-micro-runtime/core/iwasm/libraries/libc-wasi/sandboxed-system-primitives/include",
  "./thirdparty/wasm-micro-runtime/core/iwasm/libraries/libc-wasi/sandboxed-system-primitives/src",
  "./thirdparty/wasm-micro-runtime/build-scripts/../core/iwasm/include",
  "./thirdparty/wasm-micro-runtime/core/shared/mem-alloc",
  "./thirdparty/wasm-micro-runtime/core/iwasm/common",
  "./thirdparty/wasm-micro-runtime/core/shared/utils",
  # "./thirdparty/wasm-micro-runtime/core/shared/utils/uncommon",
])

sdk = [
"./thirdparty/wasm-micro-runtime/core/shared/mem-alloc/ems/ems_alloc.c",
"./thirdparty/wasm-micro-runtime/core/shared/mem-alloc/ems/ems_hmu.c",
"./thirdparty/wasm-micro-runtime/core/shared/mem-alloc/ems/ems_kfc.c",
"./thirdparty/wasm-micro-runtime/core/shared/mem-alloc/mem_alloc.c",
"./thirdparty/wasm-micro-runtime/core/shared/utils/bh_assert.c",
"./thirdparty/wasm-micro-runtime/core/shared/utils/bh_common.c",
"./thirdparty/wasm-micro-runtime/core/shared/utils/bh_hashmap.c",
"./thirdparty/wasm-micro-runtime/core/shared/utils/bh_list.c",
"./thirdparty/wasm-micro-runtime/core/shared/utils/bh_log.c",
"./thirdparty/wasm-micro-runtime/core/shared/utils/bh_queue.c",
"./thirdparty/wasm-micro-runtime/core/shared/utils/bh_vector.c",
"./thirdparty/wasm-micro-runtime/core/shared/utils/runtime_timer.c",
"./thirdparty/wasm-micro-runtime/core/iwasm/libraries/libc-builtin/libc_builtin_wrapper.c",
# "./thirdparty/wasm-micro-runtime/core/iwasm/libraries/libc-wasi/libc_wasi_wrapper.c",
# "./thirdparty/wasm-micro-runtime/core/iwasm/libraries/libc-wasi/sandboxed-system-primitives/src/posix.c",
# "./thirdparty/wasm-micro-runtime/core/iwasm/libraries/libc-wasi/sandboxed-system-primitives/src/random.c",
# "./thirdparty/wasm-micro-runtime/core/iwasm/libraries/libc-wasi/sandboxed-system-primitives/src/str.c",
"./thirdparty/wasm-micro-runtime/core/iwasm/common/wasm_c_api.c",
"./thirdparty/wasm-micro-runtime/core/iwasm/common/wasm_exec_env.c",
"./thirdparty/wasm-micro-runtime/core/iwasm/common/wasm_memory.c",
"./thirdparty/wasm-micro-runtime/core/iwasm/common/wasm_native.c",
"./thirdparty/wasm-micro-runtime/core/iwasm/common/wasm_runtime_common.c",
"./thirdparty/wasm-micro-runtime/core/iwasm/common/wasm_shared_memory.c",
"./thirdparty/wasm-micro-runtime/core/iwasm/interpreter/wasm_interp_classic.c",
"./thirdparty/wasm-micro-runtime/core/iwasm/interpreter/wasm_loader.c",
"./thirdparty/wasm-micro-runtime/core/iwasm/interpreter/wasm_runtime.c",
]

if module_env["platform"] == "windows" and module_env.msvc:
  sdk.append("./thirdparty/wasm-micro-runtime/core/iwasm/common/arch/invokeNative_em64.asm")
elif module_env["platform"] == "windows" and module_env["use_mingw"]:
  sdk.append("./thirdparty/wasm-micro-runtime/core/iwasm/common/arch/invokeNative_em64_GAS.s")
elif module_env["platform"] == "linuxbsd":
  sdk.append("./thirdparty/wasm-micro-runtime/core/iwasm/common/arch/invokeNative_em64.s")
else:
  sdk.append("./thirdparty/wasm-micro-runtime/core/iwasm/common/arch/invokeNative_general.c")
 

if module_env["platform"] == "windows":
  sdk += [
    "./thirdparty/wasm-micro-runtime/core/shared/platform/windows/platform_init.c",
    "./thirdparty/wasm-micro-runtime/core/shared/platform/windows/posix_malloc.c",
    "./thirdparty/wasm-micro-runtime/core/shared/platform/windows/win_memmap.c",
    "./thirdparty/wasm-micro-runtime/core/shared/platform/windows/win_thread.c",
    "./thirdparty/wasm-micro-runtime/core/shared/platform/windows/win_time.c",
  ]
  module_env.Prepend( CPPPATH = [
    "./thirdparty/wasm-micro-runtime/core/shared/platform/windows",
    "./thirdparty/wasm-micro-runtime/core/shared/platform/windows/../include",
    "./thirdparty/wasm-micro-runtime/core/iwasm/include",
  ])
  module_env.Append(CPPDEFINES=[
    "BH_PLATFORM_WINDOWS",
    "WIN32",
    "_WINDOWS",
  ])
else:
  module_env.Prepend( CPPPATH = [
    "./thirdparty/wasm-micro-runtime/core/shared/platform/linux",
    "./thirdparty/wasm-micro-runtime/core/shared/platform/linux/../include",
  ])
  posix = [
    "./thirdparty/wasm-micro-runtime/core/shared/platform/common/posix/posix_malloc.c",
    "./thirdparty/wasm-micro-runtime/core/shared/platform/common/posix/posix_memmap.c",
    "./thirdparty/wasm-micro-runtime/core/shared/platform/common/posix/posix_thread.c",
    "./thirdparty/wasm-micro-runtime/core/shared/platform/common/posix/posix_time.c",
  ]
  sdk = sdk + posix
  sdk.append("./thirdparty/wasm-micro-runtime/core/shared/platform/linux/platform_init.c")

  module_env.Append(CPPDEFINES=[
    "BH_PLATFORM_LINUX",
  ])

if platform == "web":
  # Web probably cannot build AOT
  module_env.Append(CPPDEFINES=[
    "BUILD_TARGET_X86_32",
  ])
else:
  module_env.Append(CPPDEFINES=[
    "BUILD_TARGET_X86_64",
    ("WASM_ENABLE_AOT", 1),
  ])
  sdk += [
    "./thirdparty/wasm-micro-runtime/core/iwasm/aot/aot_loader.c",
    "./thirdparty/wasm-micro-runtime/core/iwasm/aot/aot_runtime.c",
    "./thirdparty/wasm-micro-runtime/core/iwasm/aot/arch/aot_reloc_x86_64.c",
  ]

if module_env["platform"] == "windows" and module_env.msvc:
  module_env["AS"] = "ml64"
else:
  module_env["ASFLAGS"] = "-c"

module_env.Prepend( CPPPATH = [
    ".",
  ])
module_env.add_source_files(env.modules_sources, sdk)
module_env.add_source_files(env.modules_sources, "src/*.cpp")
module_env.add_source_files(env.modules_sources, "api/*.cpp")
module_env.add_source_files(env.modules_sources, "api/shared/*.cpp")
module_env.add_source_files(env.modules_sources, "*.cpp")
# module_env.Append(CCFLAGS=['-O2']) # Flags for C and C++ code
# module_env.Append(CXXFLAGS=['-std=c++11']) # Flags for C++ code only

module_env.Append(CPPDEFINES=[
  "TIME_UTC=1", # Don't know if this is correct. Windows uses local time.
  ("BH_FREE", "wasm_runtime_free"),
  ("BH_MALLOC", "wasm_runtime_malloc"),
  "HAVE_STRUCT_TIMESPEC",
  ("WASM_API_EXTERN", ""),
  ("WASM_RUNTIME_API_EXTERN", ""),
  ("WASM_ENABLE_BULK_MEMORY", 0),
  ("WASM_ENABLE_FAST_INTERP", 0),
  ("WASM_ENABLE_INTERP", 1),
  # ("WASM_ENABLE_LIBC_WASI", 1),
  ("WASM_ENABLE_LIBC_BUILTIN", 1),
  ("WASM_ENABLE_MINI_LOADER", 0),
  ("WASM_ENABLE_MULTI_MODULE", 0),
  ("WASM_ENABLE_SHARED_MEMORY", 0),
  # ("WASGO_API_GENERATION", "wasgo_api.json"), # will default to wasgo_api.json if no filename is provided
])
